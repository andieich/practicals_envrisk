---
title: "To Do"
format: html
editor: visual
---

-   [ ] Check formatting both files
-   [ ] Find way to hide code, produce two versions???
-   [ ] Prepare Tasks sheets
-   [ ] Add beta regression, glm intro
-   [ ] Clean up repository, upload only data that's needed
-   [ ] Add more literature & resources, e.g. Stat rethinking, etc

https://datavizf24.classes.andrewheiss.com/content/

https://datavizf24.classes.andrewheiss.com/lesson/02-lesson.html

https://clauswilke.com/dataviz/index.html

## Task 1.2

Take the [palmerpenguins](https://allisonhorst.github.io/palmerpenguins/index.html) data set (saved as `dat_penguins`) and make a similar plot:

<br>

```{r}
#| echo: false
#| output: false

library(tidyverse)

dat_penguins <-  read.csv("https://raw.githubusercontent.com/andieich/practicals_envrisk/refs/heads/main/data/penguins.csv")
```

```{r}
#| echo: false
#| warnings: false
#| message: false

dat_penguins %>% 
  filter(!is.na(bill_length_mm),
         !is.na(bill_depth_mm)) %>% 
   ggplot(aes(x = bill_length_mm,
              y = bill_depth_mm,
              col = species)) +
  geom_point(aes(shape = species),
             size = 3,
             alpha = 0.8) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_color_manual(values = c("darkorange","purple","cyan4")) +
  labs(title = "Penguin bill dimensions",
       x = "Bill length (mm)",
       y = "Bill depth (mm)",
       color = "Penguin species",
       shape = "Penguin species") +
  theme_minimal()

```

## Task X

::::: panel-tabset
## Task

```{webr}
#| exercise: ex_1.2
#| setup: true

```

```{webr}
#| exercise: ex_1.2

```

## Hints

::: {.hint exercise="ex_1.2"}
``` r
```
:::

## Solution

::: {.solution exercise="ex_1.2"}
Bla

``` r
```
:::
:::::


:::::: {.content-visible when-meta="version.presenter"}
## Bleaching event 2019

<br>

::: {.callout-warning icon="false"}
### Solution

Lines on top of each other to show variability

```{r}
#| echo: true


plot_cover_2019_2 <- dat_coral_cover_sitesS_2019 %>% 
  ggplot(aes(x = year, col = site, fill = site))+
  #geom_ribbon(aes(ymin = percent - sd, ymax = mean_percent + sd))+
  geom_line(aes(y = mean_percent), linewidth = 1)+
  geom_point(data = dat_coral_cover %>% 
                filter(year >= 2019, year <= 2023),
               aes(y = percent),
             position = position_jitter(width = .2),
             shape = 21, col = "white", size = 3)+
  labs(x = NULL, y = "Coral Cover (%)")+
  theme_minimal()


```
:::


<br>

::: {.callout-warning icon="false"}
### Solution

Different panels for each site to see what is happening where

```{r}
#| echo: true


plot_cover_2019_3 <- dat_coral_cover_sitesS_2019 %>% 
  ggplot(aes(x = year, col = site, fill = site))+
  geom_line(aes(y = mean_percent), linewidth = .8)+
  geom_point(data = dat_coral_cover %>% 
                filter(year >= 2019, year <= 2023),
               aes(y = percent),
             position = position_jitter(width = .2),
             shape = 21, col = "white", size = 2)+
  labs(x = NULL, y = "Coral Cover (%)")+
  facet_wrap(~site)+
  theme_minimal()+
  theme(legend.position = "None")

```
:::







::: callout-note
### Tips

1.  Create summary data sets:

    -   `dat_coral_cover_sitesS`: *Mean per site and year*

    -   `dat_coral_coverS`: *Mean and sd of the means per year*

2.  Plot the SD with

```{r}
#| eval: false
#| echo: true
geom_ribbon(data = dat_coral_coverS,
            aes(ymin = mean - sd, ymax = mean + sd))
```

3.  Use a line plot for the means in `dat_coral_coverS`

4.  Add points for the means in `dat_coral_cover_sitesS`
:::
::::
:::::::

:::::::: {.content-visible when-meta="version.presenter"}
## Longterm Monitoring Data

<br>

::::::: {.callout-warning icon="false"}
### Solution

:::::: columns
::: {.column width="50%"}
Prepare data

```{r}
#| eval: false
#| echo: true
# Calculate mean per site and year
dat_coral_cover_sitesS <- dat_coral_cover %>% 
  group_by(year, site) %>% 
  summarise(percent = mean(percent)) 

# Calculate mean and sd of the means per year
dat_coral_coverS <- dat_coral_cover_sitesS %>% 
  group_by(year) %>% 
  summarise(mean_percent = mean(percent),
            sd = sd(percent))
```
:::

:::: {.column width="50%"}
::: fragment
Plot

```{r}
#| eval: false
#| echo: true

plot_cover <- dat_coral_cover_sitesS %>% 
  ggplot(aes(x = year))+
  geom_ribbon(data = dat_coral_coverS, 
              aes(ymin = mean_percent - sd,
                  ymax = mean_percent + sd), 
              fill = "grey80")+
  geom_line(aes(y = mean_percent),
            data = dat_coral_coverS, linewidth = 1)+
  geom_point(aes(y = percent),
             position = position_jitter(width = .2),
             shape = 21, fill = "darkgreen", 
             col = "white", size = 3)+

  labs(x = NULL, y = "Coral Cover (%)")
```
:::
::::
::::::

<br>
:::::::
::::::::





``` r
# Filter dat_coral_cover for `year >= 2019` and `year <= 2023`
dat_coral_cover_2019 <- dat_coral_cover %>%       #<1>
  filter(year >= 2019, year <= 2023)      #<2>
  

# For each site and year, calculate the mean cover
dat_coral_cover_2019_S <- dat_coral_cover_2019 %>%       #<3>
  group_by(site, year) %>%       #<4>
  summarise(mean_percent = mean(percent))      #<5>

# Version 1: Plot lines on top of each other
ggplot(mapping = aes(x = year,      #<6>
                       col = site))+      #<7>

  # add a line
  geom_line(data = dat_coral_cover_2019_S,      #<8>
            aes(y = mean_percent))+      #<9>
  
  # add the raw data
  geom_point(data = dat_coral_cover_2019,      #<10>
             aes(y = percent),      #<11>
             position = position_jitter(width = .2))+      #<12>
  labs(x = NULL, y = "Coral Cover (%)")+                 #<13>
  theme_minimal()+      #<14>
  theme(legend.position = "None")      #<14>
  
  
# Version 2: Different sub-panels for sites
ggplot(mapping = aes(x = year,     
                       col = site))+  

  # add a line
  geom_line(data = dat_coral_cover_2019_S,  
            aes(y = mean_percent))+  
  
  # add the raw data
  geom_point(data = dat_coral_cover_2019,  
             aes(y = percent),
             position = position_jitter(width = .2))+  
  labs(x = NULL, y = "Coral Cover (%)")+
  facet_wrap(~site) +. #<15>
  theme_minimal()+    
  theme(legend.position = "None")   
  
```