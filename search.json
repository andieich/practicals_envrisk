[
  {
    "objectID": "tasks_part2.html",
    "href": "tasks_part2.html",
    "title": "TP: Environmental Risk",
    "section": "",
    "text": "Task 2.1: Explore the coral_cover data set\nData is already loaded:\n\n# Don't forget to load the tidyverse package:\nlibrary(tidyverse)\n\n# Read the coral_cover data:\ndat_coral_cover &lt;- read.csv(\"https://raw.githubusercontent.com/andieich/practicals_envrisk/refs/heads/main/data/coral_cover.csv\")\n\n\n\n\n\nTable 1: First five rows of coral_cover data set\n\n\n\n\n\n\n\n\n\nyear\ndate\nsite\ntransect\npercent\n\n\n\n\n2005\n2005-02-16\nHaapiti\n1\n32\n\n\n2005\n2005-02-16\nHaapiti\n2\n18\n\n\n2005\n2005-02-16\nHaapiti\n3\n36\n\n\n2005\n2005-02-16\nTaotaha\n1\n32\n\n\n2005\n2005-02-16\nTaotaha\n2\n42\n\n\n\n\n\n\n\n\n\n\nYou can use R functions to answer the questions or open the data frame in Excel:\n\n\n\n\nWhich years are covered?\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  summarise(______ = ______,\n3            ______ = ______)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\ncalculate the min()\n\n3\n\nand max() of year\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  summarise(min = min(year),\n3            max = max(year))\n\n1\n\ntake the dat_coral_cover data set, and then,\n\n2\n\ncalculate the min()\n\n3\n\nand max() of year\n\n\nSolution: 2005 to 2024\n\n\n\n\n\n\nAre there any gaps?\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  select(______) %&gt;%\n3  distinct() %&gt;%\n4  summarise(______ = diff(______))     %&gt;%\n5  filter(______ != ______)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\nonly select the year column, then,\n\n3\n\nremove any duplicated rows with disticnt(), then,\n\n4\n\ncalculate difference between years with diff(columnname), then,\n\n5\n\nshow only rows in which the difference is not (!=) 1\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  select(year) %&gt;%\n3  distinct() %&gt;%\n4  summarise(diff_year = diff(year))     %&gt;%\n5  filter(diff_year != 1)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\nonly select the year column, then,\n\n3\n\nremove any duplicated rows, then,\n\n4\n\ncalculate difference between years, then,\n\n5\n\nshow only rows in which the difference is not 1\n\n\nSolution: No gaps\n\n\n\n\n\n\nHow many sites?\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  select(______) %&gt;%\n3  distinct() %&gt;%\n4  summarise(______ = ______)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\nonly select the site column, then,\n\n3\n\nremove any duplicated rows, then,\n\n4\n\nshow only the number of rows with n()\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  select(site) %&gt;%\n3  distinct() %&gt;%\n4  summarise(n = n())\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\nonly select the site column, then,\n\n3\n\nremove any duplicated rows, then,\n\n4\n\nshow only the number of rows\n\n\nSolution: 13 sites\n\n\n\n\n\n\nSame number of transects per site and year?\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  group_by(______, ______) %&gt;%\n3  summarise(______ = ______ %&gt;%\n4  filter(______ != ______)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\ngroup by site and year, then,\n\n3\n\ncalculate the number or rows per group with n(), then\n\n4\n\nshow only rows in the number of rows is not (!=) 3\n\n\n\n\n\n\n1dat_coral_cover %&gt;%\n2  group_by(site, year) %&gt;%\n3  summarise(n = n()) %&gt;%\n4  filter(n != 3)\n\n1\n\nTake the dat_coral_cover data set, and then,\n\n2\n\ngroup by site and year, then,\n\n3\n\ncalculate the number or rows per group, then\n\n4\n\nshow only rows in the number of rows is not 3\n\n\nSolution: Always 3 transects per site and year\n\n\n\n\n\n\n\nTask 2.2: Make a similar plot\n\n\n\n\n\n\n\n\n\n\n\nThe points are the mean percent values per site\nThe line is the mean of these mean values\nThe shaded area in this mean ± the standard deviation sd()\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Calculate the mean coral cover per site and year\n1dat_coral_cover_sitesS &lt;- dat_coral_cover %&gt;%\n2  group_by(______, ______) %&gt;%\n3  summarise(percent = mean(______))\n\n# For each year, calculate the mean and sd of the mean cover per site\n4dat_coral_coverS &lt;- dat_coral_cover_sitesS %&gt;%\n5  group_by(______) %&gt;%\n6  summarise(mean_percent = mean(______),\n7            sd = sd(______))\n            \n# Plot the data\n8  ggplot(mapping = aes(x = ______))+\n9  geom_ribbon(data = ______,\n10              aes(ymin = ______, ymax = ______), fill = \"grey80\")+\n11  geom_line(data = ______,\n12            aes(y = ______)) +\n13  geom_point(data = ______,\n14             aes(y = ______),\n15             position = position_jitter(width = .2, seed = 1))  +\n16  labs(x = \"______\", y = \"______\") +\n17  theme_minimal()\n\n1\n\nMake a new summary data frame called dat_coral_cover_sitesS. Take the dat_coral_cover data frame and\n\n2\n\ngroup it by year and site, then,\n\n3\n\ncalculate the mean percent value.\n\n4\n\nThen, create another summary data frame called dat_coral_coverS. Take the just created dat_coral_cover_sitesS summary data frame and\n\n5\n\ngroup it by year, then,\n\n6\n\ncalculate the mean\n\n7\n\nand standard deviation (sd()). Now you are ready to plot the data.\n\n8\n\nMake a new ggplot, store in aes() the axes that will be used in all layers. year should be plotted on the x axes, the variable names for the y axis differs for the layers (percent and mean_percent).\n\n9\n\nAdd a geom_ribbon(). Use dat_coral_coverS as input data\n\n10\n\nand mean_percent - sd for ymin and mean_percent - sd for ymax. You can define the fill colour with fill.\n\n11\n\nAdd a geom_line(). Use dat_coral_coverS as input data\n\n12\n\nand mean_percent as y axis. Then,\n\n13\n\nadd a geom_point(). This time, use dat_coral_cover_sitesS as input data\n\n14\n\nand percent as y axis.\n\n15\n\nYou can randomly wiggle the position of the points to show the variability with position_jitter().\n\n16\n\nDefine the axis titles\n\n17\n\nand select a theme.\n\n\n\n\n\n\n# Calculate the mean coral cover per site and year\n1dat_coral_cover_sitesS &lt;- dat_coral_cover %&gt;%\n2  group_by(year, site) %&gt;%\n3  summarise(percent = mean(percent))\n\n# For each year, calculate the mean and sd of the mean cover per site\n4dat_coral_coverS &lt;- dat_coral_cover_sitesS %&gt;%\n5  group_by(year) %&gt;%\n6  summarise(mean_percent = mean(percent),\n7            sd = sd(percent))\n            \n# Plot the data\n8  ggplot(mapping = aes(x = year))+\n9  geom_ribbon(data = dat_coral_coverS,\n10              aes(ymin = mean_percent - sd, ymax = mean_percent + sd), fill = \"grey80\")+\n11  geom_line(data = dat_coral_coverS,\n12            aes(y = mean_percent)) +\n13  geom_point(data = dat_coral_cover_sitesS,\n14             aes(y = percent),\n15             position = position_jitter(width = .2, seed = 1)) +\n16  labs(x = NULL, y = \"Coral Cover (%)\") +\n17  theme_minimal()\n\n1\n\nMake a new summary data frame called dat_coral_cover_sitesS. Take the dat_coral_cover data frame and\n\n2\n\ngroup it by year and site, then,\n\n3\n\ncalculate the mean percent value.\n\n4\n\nThen, create another summary data frame called dat_coral_coverS. Take the just created dat_coral_cover_sitesS summary data frame and\n\n5\n\ngroup it by year, then,\n\n6\n\ncalculate the mean\n\n7\n\nand standard deviation (sd()). Now you are ready to plot the data.\n\n8\n\nMake a new ggplot, store in aes() the axes that will be used in all layers. year should be plotted on the x axes, the variable names for the y axis differs for the layers (percent and mean_percent).\n\n9\n\nAdd a geom_ribbon(). Use dat_coral_coverS as input data\n\n10\n\nand mean_percent - sd for ymin and mean_percent - sd for ymax. You can define the fill colour with fill.\n\n11\n\nAdd a geom_line(). Use dat_coral_coverS as input data\n\n12\n\nand mean_percent as y axis. Then,\n\n13\n\nadd a geom_point(). This time, use dat_coral_cover_sitesS as input data\n\n14\n\nand percent as y axis.\n\n15\n\nYou can randomly wiggle the position of the points to show the variability with position_jitter().\n\n16\n\nDefine the axis titles\n\n17\n\nand select a theme.\n\n\n\n\n\n\n\n\nTask 2.3: Explore variability between sites\n\nFilter the dat_coral_cover for year &gt;= 2019 and year &lt;= 2023\nMake a summary data frame with the mean per site and year.\nFind way to plot the variability between sites. For example, you could plot separate lines for each site or make sub-panels with facet_wrap().\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter dat_coral_cover for `year &gt;= 2019` and `year &lt;= 2023`\n1dat_coral_cover_2019 &lt;- ______ %&gt;%\n2  filter(______ &gt;= ______, ______ &lt;= ______)\n  \n\n# For each site and year, calculate the mean cover\n3dat_coral_cover_2019_S &lt;- ______ %&gt;%\n4  group_by(______, ______) %&gt;%\n5  summarise(mean_percent = ______(______))\n\n# Plot lines on top of each other\n6ggplot(mapping = aes(x = ______,\n7                       col = ______))+\n\n  # add a line\n8  geom_line(data = ______,\n9            aes(y = ______))+\n  \n  # add the raw data\n10  geom_point(data = ______,\n11             aes(y = ______),\n12             position = position_jitter(width = .2))+\n13  labs(x = \"______\", y = \"______\")+\n14  theme_minimal()+\n  theme(legend.position = \"None\")\n\n1\n\nMake a new data frame for the filtered data called dat_coral_cover_2019. Take the dat_coral_cover data frame and\n\n2\n\nfilter for year &gt;= 2019 and year &lt;= 2023.\n\n3\n\nMake a new summary data frame for the filtered data called dat_coral_cover_2019_S. Take the filtered dat_coral_cover_2019 data,\n\n4\n\ngroup by site and year,\n\n5\n\nand calculate the mean cover.\n\n6\n\nThen, plot the data. Store in aes() the axes that will be used in all layers. year should be plotted on the x axes.\n\n7\n\nsite should be used to color the points and lines. If used like that, separate lines will be drawn for each site.\n\n8\n\nAdd a geom_line() for the dat_coral_cover_2019_S data to plot\n\n9\n\nthe mean_percent data.\n\n10\n\nAdd a geom_point() for the dat_coral_cover_2019 data\n\n11\n\nto plot the percent data\n\n12\n\nYou can randomly wiggle the position of the points to show the variability with position_jitter().\n\n13\n\nDefine the axis titles\n\n14\n\nand select a theme.\n\n\n\n\n\n\n# Filter dat_coral_cover for `year &gt;= 2019` and `year &lt;= 2023`\n1dat_coral_cover_2019 &lt;- dat_coral_cover %&gt;%\n2  filter(year &gt;= 2019, year &lt;= 2023)\n  \n\n# For each site and year, calculate the mean cover\n3dat_coral_cover_2019_S &lt;- dat_coral_cover_2019 %&gt;%\n4  group_by(site, year) %&gt;%\n5  summarise(mean_percent = mean(percent))\n\n# Plot lines on top of each other\n6ggplot(mapping = aes(x = year,\n7                       col = site))+\n\n  # add a line\n8  geom_line(data = dat_coral_cover_2019_S,\n9            aes(y = mean_percent))+\n  \n  # add the raw data\n10  geom_point(data = dat_coral_cover_2019,\n11             aes(y = percent),\n12             position = position_jitter(width = .2))+\n13  labs(x = NULL, y = \"Coral Cover (%)\")+\n14  theme_minimal()+\n  theme(legend.position = \"None\")\n\n1\n\nMake a new data frame for the filtered data called dat_coral_cover_2019. Take the dat_coral_cover data frame and\n\n2\n\nfilter for year &gt;= 2019 and year &lt;= 2023.\n\n3\n\nMake a new summary data frame for the filtered data called dat_coral_cover_2019_S. Take the filtered dat_coral_cover_2019 data,\n\n4\n\ngroup by site and year,\n\n5\n\nand calculate the mean cover.\n\n6\n\nThen, plot the data. Store in aes() the axes that will be used in all layers. year should be plotted on the x axes.\n\n7\n\nsite should be used to color the points and lines. If used like that, separate lines will be drawn for each site.\n\n8\n\nAdd a geom_line() for the dat_coral_cover_2019_S data to plot\n\n9\n\nthe mean_percent data.\n\n10\n\nAdd a geom_point() for the dat_coral_cover_2019 data\n\n11\n\nto plot the percent data\n\n12\n\nYou can randomly wiggle the position of the points to show the variability with position_jitter().\n\n13\n\nDefine the axis titles\n\n14\n\nand select a theme.\n\n\n\n\n\n\n\n\nTask 2.4: Combine data\nCombine dat_change_coral_cover and dat_max_dhw_2019_sites based on the site column\nUse the left_join() function:\n\n1dat_new &lt;- left_join(x = data_1,\n2                     y = data_2,\n3                     by = \"column_name\")\n\n\n1\n\ndata_1 will be used as “template”. To all rows data will be added. If not in data_2, NA values will be added\n\n2\n\ndata_2 will be used to add all columns to data_1,\n\n3\n\nbased on common values in the \"column_name\" (Note the \"\")\n\n\n\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_change_coral_cover &lt;- left_join(______,\n2                                    ______,\n3                                    by = \"______\")\n\n1\n\nReplace dat_change_coral_cover with the combined data of dat_change_coral_cover and dat_max_dhw_2019_sites. Use dat_change_coral_cover as a template\n\n2\n\nto add data from dat_max_dhw_2019_sites\n\n3\n\nbased on common values in the \"sites\" column\n\n\n\n\n\n\n1dat_change_coral_cover &lt;- left_join(dat_change_coral_cover,\n2                                    dat_max_dhw_2019_sites,\n3                                    by = \"site\")\n\n1\n\nReplace dat_change_coral_cover with the combined data of dat_change_coral_cover and dat_max_dhw_2019_sites. Use dat_change_coral_cover as a template\n\n2\n\nto add data from dat_max_dhw_2019_sites\n\n3\n\nbased on common values in the \"sites\" column\n\n\n\n\n\n\n\n\nTask 2.5: Regression\nAnalyse the impact of max_dhw on rel_change in the dat_change_coral_cover data set:\n\nIs this effect significant?\nWhat is the expected change in coral cover per unit DHW?\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Run a regression\n1m_change_coral_cover &lt;- lm(______ ~ ______,\n2                           data = ______)\n\n# Show results\n3summary(______)\n\n1\n\nRun a regression model and call it m_change_coral_cover. Use max_dhw to explain rel_change.\n\n2\n\nBoth columns are in the dat_change_coral_cover data frame.\n\n3\n\nShow the results of the regression called m_change_coral_cover\n\n\n\n\n\n\n# Run a regression\n1m_change_coral_cover &lt;- lm(rel_change ~ max_dhw,\n2                           data = dat_change_coral_cover)\n\n# Show results\n3summary(m_change_coral_cover)\n\n1\n\nRun a regression model and call it m_change_coral_cover. Use max_dhw to explain rel_change.\n\n2\n\nBoth columns are in the dat_change_coral_cover data frame.\n\n3\n\nShow the results of the regression called m_change_coral_cover\n\n\n\n\nMeaning\nThe intensity of the heat stress, measured as the maximum degree heating weeks in 2019 (DHWmax), significantly impacted the decline in coral cover (t(11) = 5.036, p &lt; .001, adj. R2 = 0.67). The expected relative decline in coral cover increased by 90.5% ± 18.0% (SE) per unit of DHWmax.\n\n\n\n\n\n\n\n\nTask 2.6: Regression visualisation\nPlot the coral cover data and model in a similar way\n\n\n\n\n\n\n\n\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Make a new data frame with sequence of x values\n1ndat_coralcover_dhw &lt;-  data.frame(______ = seq(min(______),\n2                                                 max(______,\n3                                                 length = ______))\n\n# Predict data\n4pred_coralcover_dhw  &lt;- predict(______,\n5                                newdata = ______,\n6                                se.fit = T) %&gt;%\n7                        bind_cols(______)\n  \n# Plot\n8ggplot(mapping = aes(x = ______))+\n  # Plot SE\n9  geom_ribbon(data = ______,\n              aes(ymin = ______,\n                  ymax = ______),\n              fill = \"grey\")+\n  #Plot model\n10  geom_line(data = ______,\n            aes(y = ______),\n            col = \"darkred\", linewidth = 1.2)+   \n  # Plot raw data\n11  geom_point(data = ______,\n             aes(y = ______), size = 4)\n\n1\n\nMake a new data frame and call it ndat_coralcover_dhw. Add a column called max_dhw containing a sequence from the minimum max_dhw value in dat_change_coral_cover\n\n2\n\nto the maximum max_dhw value.\n\n3\n\nThe sequence should have 100 entries\n\n4\n\nBased on the model m_change_coral_cover, predict values and store them in a new data frame called pred_coralcover_dhw.\n\n5\n\nThe predicted values should be done for x values in ndat_coralcover_dhw.\n\n6\n\nAlso predict the standard error.\n\n7\n\npredict() only returns the predicted values. For plotting, add again the x values stored in ndat_coralcover_dhw. Now you are set up for the plot.\n\n8\n\nStore in aes() the axes that will be used in all layers. max_dhw should be plotted on the x axes.\n\n9\n\nAdd a geom_ribbon() for the predicted data ± the standard error (fit - se.fit for yminand fit + se.fit for ymax). These columns are in pred_coralcover_dhw.\n\n10\n\nNow, add the regression line with geom_line(). The column fit in pred_coralcover_dhw should be used as y axis.\n\n11\n\nThen, add the raw data that is stored in dat_change_coral_cover. Use rel_change as y axis.\n\n\n\n\n\n\n# Make a new data frame with sequence of x values\n1ndat_coralcover_dhw &lt;-  data.frame(max_dhw = seq(min(dat_change_coral_cover$max_dhw),\n2                                                 max(dat_change_coral_cover$max_dhw),\n3                                                 length = 100))\n\n# Predict data\n4pred_coralcover_dhw  &lt;- predict(m_change_coral_cover,\n5                                newdata = ndat_coralcover_dhw,\n6                                se.fit = T) %&gt;%\n7                        bind_cols(ndat_coralcover_dhw)\n  \n# Plot\n8ggplot(mapping = aes(x = max_dhw))+\n  # Plot SE\n9  geom_ribbon(data = pred_coralcover_dhw,\n              aes(ymin = fit - se.fit,\n                  ymax = fit + se.fit),\n              fill = \"grey\")+\n  #Plot model\n10  geom_line(data = pred_coralcover_dhw,\n            aes(y = fit),\n            col = \"darkred\", linewidth = 1.2)+   \n  # Plot raw data\n11  geom_point(data = dat_change_coral_cover,\n             aes(y = rel_change), size = 4) +\n  # Formatting\n  labs(x = expression(DWH[max]),\n       y = expression(Delta~Relative~cover~\"(%)\"))+\n  theme_light()+\n  theme(panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank())\n\n1\n\nMake a new data frame and call it ndat_coralcover_dhw. Add a column called max_dhw containing a sequence from the minimum max_dhw value in dat_change_coral_cover\n\n2\n\nto the maximum max_dhw value.\n\n3\n\nThe sequence should have 100 entries\n\n4\n\nBased on the model m_change_coral_cover, predict values and store them in a new data frame called pred_coralcover_dhw.\n\n5\n\nThe predicted values should be done for x values in ndat_coralcover_dhw.\n\n6\n\nAlso predict the standard error.\n\n7\n\npredict() only returns the predicted values. For plotting, add again the x values stored in ndat_coralcover_dhw. Now you are set up for the plot.\n\n8\n\nStore in aes() the axes that will be used in all layers. max_dhw should be plotted on the x axes.\n\n9\n\nAdd a geom_ribbon() for the predicted data ± the standard error (fit - se.fit for yminand fit + se.fit for ymax). These columns are in pred_coralcover_dhw.\n\n10\n\nNow, add the regression line with geom_line(). The column fit in pred_coralcover_dhw should be used as y axis.\n\n11\n\nThen, add the raw data that is stored in dat_change_coral_cover. Use rel_change as y axis. ```"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TP Environmental Risk",
    "section": "",
    "text": "Each slide will open in a new tab\n\n   Part 1 \n   Part 2 \n\n\n\nTask sheets contain R code that can be run in the browser\n\n   Task 1 \n   Task 2 \n\n\n\nRStudio Project containing the scripts for the final task\n\n   Download ZIP \n   Posit Cloud"
  },
  {
    "objectID": "index.html#course-materials-for-the-tp-environmental-risk-2025",
    "href": "index.html#course-materials-for-the-tp-environmental-risk-2025",
    "title": "TP Environmental Risk",
    "section": "",
    "text": "Each slide will open in a new tab\n\n   Part 1 \n   Part 2 \n\n\n\nTask sheets contain R code that can be run in the browser\n\n   Task 1 \n   Task 2 \n\n\n\nRStudio Project containing the scripts for the final task\n\n   Download ZIP \n   Posit Cloud"
  },
  {
    "objectID": "data/maps/coralreefs_polynesia/coralreefs_polynesia.html",
    "href": "data/maps/coralreefs_polynesia/coralreefs_polynesia.html",
    "title": "TP Environmental Risk",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n         0 0     false"
  },
  {
    "objectID": "tasks_part1.html",
    "href": "tasks_part1.html",
    "title": "TP: Environmental Risk",
    "section": "",
    "text": "Task 1.2\nTake the palmerpenguins data set (saved as dat_penguins) and make a similar plot:\n\n\n\n\n\n\n\n\n\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                                 \n1   ggplot(data = ______,\n2          aes(x = ______,\n              y = ______,\n3              col = ______)) +\n4  geom_point(aes(shape = ______),\n5             size = 3,\n6             alpha = 0.8) +\n7  geom_smooth(method = \"lm\", se = FALSE) +\n8  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n9  labs(title = ______,\n       x = ______,\n       y = ______) +\n10  theme_minimal()\n\n1\n\nTake the dat_penguins data set, and then,\n\n2\n\nUse bill_length_mm as x and bill_depth_mm as y axis\n\n3\n\nUse different colors for the different species\n\n4\n\nAdd a point layer, use different point shapes for the different species\n\n5\n\nDefine point size\n\n6\n\nand transparency\n\n7\n\nAdd lines through the point clouds for each species (takes col = species from the 2\n\n8\n\nDefine a manual color scale\n\n9\n\nDefine the title, x, y axes, and a name for the colour legend\n\n10\n\nAdd a theme\n\n\n\n\n\n\nUse the filter() function from dplyr:\n1  ggplot(data = dat_penguins,\n2          aes(x = bill_length_mm,\n              y = bill_depth_mm,\n3              col = species)) +\n4  geom_point(aes(shape = species),\n5             size = 3,\n6             alpha = 0.8) +\n7  geom_smooth(method = \"lm\", se = FALSE) +\n8  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n9  labs(title = \"Penguin bill dimensions\",\n       x = \"Bill length (mm)\",\n       y = \"Bill depth (mm)\",\n       color = \"Penguin species\",\n       shape = \"Penguin species\") +\n10  theme_minimal()\n\n1\n\nTake the dat_penguins data set, and then,\n\n2\n\nUse bill_length_mm as x and bill_depth_mm as y axis\n\n3\n\nUse different colors for the different species\n\n4\n\nAdd a point layer, use different point shapes for the different species\n\n5\n\nDefine point size\n\n6\n\nand transparency\n\n7\n\nAdd lines through the point clouds for each species (takes col = species from the 2\n\n8\n\nDefine a manual color scale\n\n9\n\nDefine the title, x, y axes, and a name for the color legend\n\n10\n\nAdd a theme\n\n\n\n\n\n\n\n\nTask 1.3\nCalculate the mean, standard deviation (sd()), and replicates (n()) of body_mass_gfor the different species and sexes in dat_penguins.\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_penguins %&gt;%\n2  group_by(______, ______) %&gt;%\n3  summarize(______ = ______,\n            ______ = ______,\n            ______ = ______)\n\n1\n\nTake the dat_penguins data\n\n2\n\nGroup it by species and sex\n\n3\n\nSummarise for mean(), sd(), and n()\n\n\n\n\n\n\n1dat_penguins %&gt;%\n2  group_by(species, sex) %&gt;%\n3  summarize(mean_body_mass_g = mean(body_mass_g),\n            sd_body_mass_g = sd(body_mass_g),\n            n = n())\n\n1\n\nTake the dat_penguins data\n\n2\n\nGroup it by species and sex\n\n3\n\nSummarise for mean(), sd(), and n()\n\n\n\n\n\n\n\n\nTask 1.4\nTake the dat_penguins data and\n\ncalculate the mean body_mass_g per year and species\nchange the format from long to wide, year should be distributed across columns\n\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\n\n1dat_penguins %&gt;%\n2  group_by(______, ______) %&gt;%\n3  summarise(______ = mean(______)) %&gt;%\n4  pivot_wider(names_from = ______,\n5  values_from = ______)\n\n1\n\nTake the dat_penguins data\n\n2\n\nGroup it by species and year\n\n3\n\nCalculate the mean() of body_mass_g\n\n4\n\nTransform into a wide data frame, take the column names from year\n\n5\n\nand the values from the mean body_mass_g\n\n\n\n\n\n\n1dat_penguins %&gt;%\n2  group_by(species, year) %&gt;%\n3  summarise(mean_body_mass_g = mean(body_mass_g)) %&gt;%\n4  pivot_wider(names_from = year,\n5  values_from = mean_body_mass_g)\n\n1\n\nTake the dat_penguins data\n\n2\n\nGroup it by species and year\n\n3\n\nCalculate the mean() of body_mass_g\n\n4\n\nTransform into a wide data frame, take the column names from year\n\n5\n\nand the values from mean_body_mass_g\n\n\n\n\n\n\n\n\nTask 1.4 Bonus\nWhy are there NA values and how can you avoid it?\n\nTaskHintsSolution\n\n\n\n\n\n\n\n\n\n\n\n\nHave a look at the actual data:\n\ndat_penguins %&gt;%\n  view()\n\n\n\n\nThe data contains NA values. Since these values are not known, R cannot calculate a mean for groups containing NA values. To ignore NA values, set na.rm = TRUE in the mean() function:\ndat_penguins %&gt;%\n  group_by(species, year) %&gt;%\n  summarise(mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)) %&gt;%\n  pivot_wider(names_from = year,\n  values_from = mean_body_mass_g)"
  }
]